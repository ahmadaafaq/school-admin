import{a as r,b as H,v as L,R as O,A as u,j as a,B as j,m as c,n as d,I as h,S as m,M as f,w as x}from"./index-wJj9abeo.js";import{c as N}from"./Validation-UJUBWKF9.js";const Q={street:"",landmark:"",zipcode:"",country:0,state:0,city:0},J=({onChange:p,refId:v,update:F,setDirty:I,reset:y,setReset:b,iCardDetails:g=null,setICardDetails:k=null,updatedValues:i=null})=>{const[w,E]=r.useState(Q),[z,A]=r.useState([]),[o,B]=r.useState(null),[V,C]=r.useState([]),[n,T]=r.useState(null),[W,l]=r.useState([]),[Z,P]=r.useState(null),M=H("(min-width:600px)"),e=L({initialValues:w,validationSchema:N,enableReinitialize:!0,onSubmit:()=>R()});O.useImperativeHandle(v,()=>({Submit:async()=>{await e.submitForm()}}));const R=()=>{p&&p({values:e.values,validated:e.isSubmitting?Object.keys(e.errors).length===0:!1})};r.useEffect(()=>{y&&(e.resetForm(),b(!1))},[y]),r.useEffect(()=>{e.dirty&&I(!0)},[e.dirty]),r.useEffect(()=>{i&&E(i)},[i]),r.useEffect(()=>{g&&k({...g,...e.values})},[e.values]),r.useEffect(()=>{(()=>{u.CountryAPI.getCountries().then(s=>{(s==null?void 0:s.status)==="Success"?A(s.data.list):console.log("An Error Occurred, Please Try Again")}).catch(s=>{throw s})})()},[]),r.useEffect(()=>{(()=>{(e.values.country||o)&&u.StateAPI.getStates(e.values.country||o).then(s=>{(s==null?void 0:s.status)==="Success"?(C(s.data.list),l([]),F&&S()):(C([]),l([]),e.setFieldValue("state",0),e.setFieldValue("city",0))}).catch(s=>{throw s})})()},[e.values.country,o]),r.useEffect(()=>{n&&S()},[n]);const S=r.useCallback(()=>{u.CityAPI.getCities(e.values.state||n).then(t=>{(t==null?void 0:t.status)==="Success"?l(t.data.list):(l([]),e.setFieldValue("city",0))}).catch(t=>{throw l([]),e.setFieldValue("city",0),t})},[e.values.state,n]);return a.jsx(j,{m:"20px",marginBottom:"60px",children:a.jsx("form",{ref:v,children:a.jsxs(j,{display:"grid",gap:"30px",gridTemplateColumns:"repeat(4, minmax(0, 1fr))",position:"relative",id:"box-shadow",sx:{"& > div":{gridColumn:M?void 0:"span 4"},transform:"translate(0)",transformStyle:"preserve-3d"},children:[a.jsx(c,{fullWidth:!0,variant:"filled",type:"text",name:"street",label:"Street*",autoComplete:"new-street",onBlur:e.handleBlur,onChange:e.handleChange,value:e.values.street,error:!!e.touched.street&&!!e.errors.street,helperText:e.touched.street&&e.errors.street,sx:{gridColumn:"span 2"}}),a.jsx(c,{fullWidth:!0,variant:"filled",type:"text",name:"landmark",label:"Landmark",autoComplete:"new-landmark",onBlur:e.handleBlur,onChange:e.handleChange,value:e.values.landmark,error:!!e.touched.landmark&&!!e.errors.landmark,helperText:e.touched.landmark&&e.errors.landmark,sx:{gridColumn:"span 2"}}),a.jsx(c,{fullWidth:!0,variant:"filled",type:"text",name:"zipcode",label:"Zipcode*",autoComplete:"new-zipcode",onBlur:e.handleBlur,onChange:e.handleChange,value:e.values.zipcode,error:!!e.touched.zipcode&&!!e.errors.zipcode,helperText:e.touched.zipcode&&e.errors.zipcode,sx:{gridColumn:"span 1"}}),a.jsxs(d,{variant:"filled",sx:{minWidth:120},error:!!e.touched.country&&!!e.errors.country,children:[a.jsx(h,{id:"countryField",children:"--Select Country*--"}),a.jsx(m,{autoComplete:"new-country",name:"country",variant:"filled",value:e.values.country,onChange:t=>{const s=t.target.value;B(s),e.setFieldValue("country",t.target.value)},children:z.map(t=>a.jsx(f,{value:t.id,name:t.name,children:t.name},t.name))}),a.jsx(x,{children:e.touched.country&&e.errors.country})]}),a.jsxs(d,{variant:"filled",sx:{minWidth:120},error:!!e.touched.state&&!!e.errors.state,children:[a.jsx(h,{id:"stateField",children:"--Select State*--"}),a.jsx(m,{autoComplete:"new-state",defaultValue:null,name:"state",variant:"filled",value:e.values.state,onChange:t=>{const s=t.target.value;T(s),e.setFieldValue("state",t.target.value)},children:V.map(t=>a.jsx(f,{value:t.id,name:t.name,children:t.name},t.name))}),a.jsx(x,{children:e.touched.state&&e.errors.state})]}),a.jsxs(d,{variant:"filled",sx:{minWidth:120},error:!!e.touched.city&&!!e.errors.city,children:[a.jsx(h,{id:"cityField",children:"--Select City*--"}),a.jsx(m,{autoComplete:"new-city",defaultValue:"",name:"city",variant:"filled",value:e.values.city,onChange:t=>{const s=t.target.value;P(s),e.setFieldValue("city",t.target.value)},children:W.map(t=>a.jsx(f,{value:t.id,name:t.name,children:t.name},t.name))}),a.jsx(x,{children:e.touched.city&&e.errors.city})]})]})})})};export{J as A};
