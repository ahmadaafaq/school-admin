import{a as s,d as P,v as M,R as D,m as u,j as a,B as F,o as d,F as c,I as h,S as m,M as x,w as p}from"./index-MsP7Yzml.js";import{c as $,a as y,b as f}from"./index.esm-JiYwYH4D.js";const H=$({street:y().min(4,"Too Short!").max(80,"Too Long!").matches(/[a-z]/,"Invalid Street Name Detected").required("This Field is Required"),landmark:y().min(4,"Too Short!").max(80,"Too Long!").matches(/[a-z]/,"Invalid Landmark Detected"),zipcode:y().min(4,"Too Short!").max(20,"Too Long!").matches(/[0-9]/,"Invalid Zipcode Detected").required("This Field is Required"),country:f().required("This Field is Required"),state:f().required("This Field is Required"),city:f().required("This Field is Required")}),N={street:"",landmark:"",zipcode:"",country:0,state:0,city:0},G=({onChange:v,refId:g,update:I,setDirty:T,reset:C,setReset:k,updatedValues:n=null})=>{const[b,w]=s.useState(N),[z,q]=s.useState([]),[o,B]=s.useState(null),[E,S]=s.useState([]),[i,R]=s.useState(null),[V,l]=s.useState([]),[O,A]=s.useState(null),L=P("(min-width:600px)"),e=M({initialValues:b,validationSchema:H,enableReinitialize:!0,onSubmit:()=>W()});D.useImperativeHandle(g,()=>({Submit:async()=>{await e.submitForm()}}));const W=()=>{v&&v({values:e.values,validated:e.isSubmitting?Object.keys(e.errors).length===0:!1})};s.useEffect(()=>{C&&(e.resetForm(),k(!1))},[C]),s.useEffect(()=>{e.dirty&&T(!0)},[e.dirty]),s.useEffect(()=>{n&&w(n)},[n]),s.useEffect(()=>{(()=>{u.CountryAPI.getCountries().then(r=>{(r==null?void 0:r.status)==="Success"?q(r.data.list):console.log("An Error Occurred, Please Try Again")}).catch(r=>{throw r})})()},[]),s.useEffect(()=>{(()=>{(e.values.country||o)&&u.StateAPI.getStates(e.values.country||o).then(r=>{(r==null?void 0:r.status)==="Success"?(S(r.data.list),l([]),I&&j()):(S([]),l([]),e.setFieldValue("state",0),e.setFieldValue("city",0))}).catch(r=>{throw r})})()},[e.values.country,o]),s.useEffect(()=>{i&&j()},[i]);const j=s.useCallback(()=>{u.CityAPI.getCities(e.values.state||i).then(t=>{(t==null?void 0:t.status)==="Success"?l(t.data.list):(l([]),e.setFieldValue("city",0))}).catch(t=>{throw l([]),e.setFieldValue("city",0),t})},[e.values.state,i]);return a.jsx(F,{m:"20px",marginBottom:"60px",children:a.jsx("form",{ref:g,children:a.jsxs(F,{display:"grid",gap:"30px",gridTemplateColumns:"repeat(4, minmax(0, 1fr))",position:"relative",id:"box-shadow",sx:{"& > div":{gridColumn:L?void 0:"span 4"},transform:"translate(0)",transformStyle:"preserve-3d"},children:[a.jsx(d,{fullWidth:!0,variant:"filled",type:"text",name:"street",label:"Street*",autoComplete:"new-street",onBlur:e.handleBlur,onChange:e.handleChange,value:e.values.street,error:!!e.touched.street&&!!e.errors.street,helperText:e.touched.street&&e.errors.street,sx:{gridColumn:"span 2"}}),a.jsx(d,{fullWidth:!0,variant:"filled",type:"text",name:"landmark",label:"Landmark",autoComplete:"new-landmark",onBlur:e.handleBlur,onChange:e.handleChange,value:e.values.landmark,error:!!e.touched.landmark&&!!e.errors.landmark,helperText:e.touched.landmark&&e.errors.landmark,sx:{gridColumn:"span 2"}}),a.jsx(d,{fullWidth:!0,variant:"filled",type:"text",name:"zipcode",label:"Zipcode*",autoComplete:"new-zipcode",onBlur:e.handleBlur,onChange:e.handleChange,value:e.values.zipcode,error:!!e.touched.zipcode&&!!e.errors.zipcode,helperText:e.touched.zipcode&&e.errors.zipcode,sx:{gridColumn:"span 1"}}),a.jsxs(c,{variant:"filled",sx:{minWidth:120},error:!!e.touched.country&&!!e.errors.country,children:[a.jsx(h,{id:"countryField",children:"--Select Country*--"}),a.jsx(m,{autoComplete:"new-country",name:"country",variant:"filled",value:e.values.country,onChange:t=>{const r=t.target.value;B(r),e.setFieldValue("country",t.target.value)},children:z.map(t=>a.jsx(x,{value:t.id,name:t.name,children:t.name},t.name))}),a.jsx(p,{children:e.touched.country&&e.errors.country})]}),a.jsxs(c,{variant:"filled",sx:{minWidth:120},error:!!e.touched.state&&!!e.errors.state,children:[a.jsx(h,{id:"stateField",children:"--Select State*--"}),a.jsx(m,{autoComplete:"new-state",defaultValue:null,name:"state",variant:"filled",value:e.values.state,onChange:t=>{const r=t.target.value;R(r),e.setFieldValue("state",t.target.value)},children:E.map(t=>a.jsx(x,{value:t.id,name:t.name,children:t.name},t.name))}),a.jsx(p,{children:e.touched.state&&e.errors.state})]}),a.jsxs(c,{variant:"filled",sx:{minWidth:120},error:!!e.touched.city&&!!e.errors.city,children:[a.jsx(h,{id:"cityField",children:"--Select City*--"}),a.jsx(m,{autoComplete:"new-city",defaultValue:"",name:"city",variant:"filled",value:e.values.city,onChange:t=>{const r=t.target.value;A(r),e.setFieldValue("city",t.target.value)},children:V.map(t=>a.jsx(x,{value:t.id,name:t.name,children:t.name},t.name))}),a.jsx(p,{children:e.touched.city&&e.errors.city})]})]})})})};export{G as A};
